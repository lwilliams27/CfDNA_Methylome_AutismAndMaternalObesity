###Chromatin State Enrichment Analysis - ASD DMRs###

##Males##
#!/usr/bin/env Rscript

#chromatin state from DMRichR package
# Author: Ensieh Habibi


# Initialize --------------------------------------------------------------

cat("\n[DMRichR] Initializing \t\t\t\t\t", format(Sys.time(), "%d-%m-%Y %X"), "\n")

if(length(grep("hive.hpc.ucdavis.edu", .libPaths())) > 0){
  .libPaths("/quobyte/lasallegrp/programs/.conda/envs/DMRichR_R4.2/lib/R/library")
  AnnotationHub::setAnnotationHubOption("CACHE", "/quobyte/lasallegrp/programs/.conda/envs/DMRichR_R4.2/lib/R/library")
  ExperimentHub::setExperimentHubOption("CACHE", "/quobyte/lasallegrp/programs/.conda/envs/DMRichR_R4.2/lib/R/library")
}

library(DMRichR)

db <- LOLA::loadRegionDB(dbLocation = "/quobyte/lasallegrp/programs/LOLA/hg38",
                                 useCache = TRUE,
                                 limit = NULL,
                                 collections = "Roadmap_ChromHMM")

regions = read.table('/quobyte/lasallegrp/Logan/MARBLES_cfDNAWGBS_Analysis/DMRichR/10_DMRichR_NonASD_ASD/Sex_Stratified/05_Males/Extra/chromatinstate2/regions_universe.bed', sep = '\t')
colnames(regions) = c('seqnames', 'start', 'end')

sigRegions = read.table('/quobyte/lasallegrp/Logan/MARBLES_cfDNAWGBS_Analysis/DMRichR/10_DMRichR_NonASD_ASD/Sex_Stratified/05_Males/Extra/bsseq_background.bed', sep = '\t')
colnames(sigRegions) = c('seqnames', 'start', 'end')

sigRegions




library(GenomicRanges)

# Assuming regions is your data.frame with columns 'seqnames', 'start', 'end', etc.
regions <- makeGRangesFromDataFrame(regions)
regions

# Assuming regions is your data.frame with columns 'seqnames', 'start', 'end', etc.
sigRegions <- makeGRangesFromDataFrame(sigRegions)
sigRegions

# changed code for chromHMM
#' chromHMM
#' @title Chromatin state enrichments
#' @description Perfom enrichment testing against the ChromHMM 15-state model for hg38
#'  using \code{LOLA}
#' @param sigRegions A \code{GRanges} object of significant regions
#' @param regions A \code{GRanges} object of background regions
#' @param cores An integer of how many cores to use
#' @return A \code{tibble} of enrichment results
#' @importFrom dplyr as_tibble select mutate summarize pull mutate_if arrange recode_factor
#' @importFrom tidyr pivot_wider
#' @importFrom LOLA loadRegionDB runLOLA writeCombinedEnrichment
#' @importFrom magrittr %>% %T>%
#' @importFrom hablar s
#' @export chromHMM
#' 
chromHMM <- function(sigRegions = sigRegions,
                     regions = regions,
                     cores = cores){
  message("Performing ChromHMM enrichment testing")
  chromHMM <- LOLA::runLOLA(userSets = sigRegions,
                  userUniverse = regions,
                  regionDB = db,
                  minOverlap = 1,
                  cores = cores,
                  redefineUserSets = FALSE) %T>%
    LOLA::writeCombinedEnrichment(combinedResults = .,
                                  outFolder = "ChromHMM",
                                  includeSplits = FALSE) %>%
    dplyr::as_tibble() %>%
    dplyr::select(oddsRatio, cellType, tissue, antibody) %>%
    dplyr::mutate(antibody = as.factor(antibody)) %>% 
    dplyr::mutate(antibody = dplyr::recode_factor(antibody,
                                                  "01_TssA" = "Active TSS",
                                                  "02_TssAFlnk" = "Flanking Active TSS",
                                                  "03_TxFlnk" = "Transcription at Gene 5' and 3'",
                                                  "04_Tx" = "Strong Transcription",
                                                  "05_TxWk" = "Weak Transcription",
                                                  "06_EnhG"= "Genic Enhancers",
                                                  "07_Enh" = "Enhancers",
                                                  "08_ZnfRpts" = "ZNF Genes & Repeats",
                                                  "09_Het" = "Heterochromatin",
                                                  "10_TssBiv" = "Bivalent/Poised TSS",
                                                  "11_BivFlnk" = "Flanking Bivalent TSS/Enhancer",
                                                  "12_EnhBiv" = "Bivalent Enhancer",
                                                  "13_ReprPC" = "Repressed PolyComb",
                                                  "14_ReprPCwk" = "Weak Repressed PolyComb",
                                                  "15_Quies" = "Quiescent/Low"
                                                  )
                  ) %>%
    dplyr::arrange(antibody) 
  
  # Fix Inf Odds Ratio
  max <- chromHMM %>%
  dplyr::summarize(max(hablar::s(oddsRatio))) %>% 
    dplyr::pull()
  
  chromHMM <- chromHMM %>%
    dplyr::mutate_if(is.numeric, function(x) ifelse(is.infinite(x), max, x)) %>% 
    tidyr::pivot_wider(names_from = antibody, values_from = oddsRatio) %>%
    dplyr::arrange(tissue) %>%
    return()
}

#' chromHMM_heatmap
#' @title Chromatin state heatmap
#' @description Plot a heatmap of \code{LOLA} enrichment testing results of the ChromHMM
#'  15-state model for hg38inificantregions_mCG_c1.bed
#' @param chromHMM A \code{tibble} of enrichment results
#' @return Saves a heatmap
#' @importFrom dplyr group_by tally select
#' @importFrom magrittr %>%
#' @importFrom viridis viridis
#' @importFrom gplots heatmap.2
#' @importFrom PerformanceAnalytics tol21rainbow
#' @export chromHMM_heatmap
#' 
chromHMM_heatmap <- function(chromHMM = chromHMM){
  message("Plotting ChromHMM heatmap")
  
  # Make Row Labels
  labels <- chromHMM %>%
    dplyr::group_by(tissue) %>% 
    dplyr::tally()
  
  # Colors
  palette(PerformanceAnalytics::tol21rainbow)
  rowcolors <- as.list(palette(PerformanceAnalytics::tol21rainbow))
  rowcolors <- rowcolors[1:nrow(labels)]
  
  colorlist <- list()
  for (i in 1:length(labels$n)){
    colorlist[[i]] <- rep(rowcolors[i], labels$n[i])
  }
  colorlist <- unlist(colorlist)
  
  # Select matrix data
  data <- chromHMM %>%
    dplyr::select(-cellType, -tissue) %>%
    data.matrix()
  
  # Plot Heatmap
  pdf("ChromHMM/ChromHMM_heatmap.pdf",
      height = 8.5,
      width = 12)
  
  gplots::heatmap.2(data,
                    Rowv = F,
                    Colv = F,
                    dendrogram = "none",
                    col = viridis::viridis(15, option = "inferno"),
                    margins = c(15,2),
                    trace = "none",
                    labRow = "" ,
                    labCol = colnames(data),
                    main = "Enriched Chromatin States for Differentially Methylated Regions",
                    RowSideColors = colorlist,
                    srtCol = 60,
                    keysize = 0.85,
                    key.par = list(cex = 0.5),
                    key.xlab = "Odds Ratio",
                    key.ylab = "Frequency",
                    key.title = ""
  )
  
  # Legend
  par(xpd = TRUE, mar = par()$mar + c(0,6,0,0))
  legend(x = -0.075,
         y= 0.9,
         legend = labels$tissue,
         col = unlist(rowcolors),
         lty = 1,
         lwd = 6,
         cex = 1,
         bty = "n")
  dev.off()
}

# ' dmrList
# ' @title Stratify DMRs by directionality 
# ' @description Create \code{GRangesList} object of all, hypermethylated,
# '  and hypomethylated DMRs from \code{dmrseq::dmrseq()}
# ' @param sigRegions A \code{GRanges} object of DMRs from \code{dmrseq::dmrseq()}
# ' @return A \code{GRangesList} of DMRs
# ' @importFrom magrittr %>%
# ' @importFrom plyranges filter
# ' @importFrom GenomicRanges GRangesList
# ' @export dmrList
# ' 
# dmrList <- function(sigRegions = sigRegions){
#   message("Making DMR list")
  
#   GenomicRanges::GRangesList("All DMRs" = sigRegions,
#                              "Hypermethylated DMRs" = sigRegions %>%
#                                plyranges::filter(stat > 0),
#                              "Hypomethylated DMRs" = sigRegions %>%
#                                plyranges::filter(stat < 0)) %>% 
#     return()
# }

chromHMM <- chromHMM(sigRegions = sigRegions, regions = regions, cores = 10)
chromHMM_heatmap <- chromHMM_heatmap(chromHMM = chromHMM)


##Females##

#!/usr/bin/env Rscript

#chromatin state from DMRichR package
# Author: Ensieh Habibi


# Initialize --------------------------------------------------------------

cat("\n[DMRichR] Initializing \t\t\t\t\t", format(Sys.time(), "%d-%m-%Y %X"), "\n")

if(length(grep("hive.hpc.ucdavis.edu", .libPaths())) > 0){
  .libPaths("/quobyte/lasallegrp/programs/.conda/envs/DMRichR_R4.2/lib/R/library")
  AnnotationHub::setAnnotationHubOption("CACHE", "/quobyte/lasallegrp/programs/.conda/envs/DMRichR_R4.2/lib/R/library")
  ExperimentHub::setExperimentHubOption("CACHE", "/quobyte/lasallegrp/programs/.conda/envs/DMRichR_R4.2/lib/R/library")
}

library(DMRichR)

db <- LOLA::loadRegionDB(dbLocation = "/quobyte/lasallegrp/programs/LOLA/hg38",
                                 useCache = TRUE,
                                 limit = NULL,
                                 collections = "Roadmap_ChromHMM")

regions = read.table('/quobyte/lasallegrp/Logan/MARBLES_cfDNAWGBS_Analysis/DMRichR/10_DMRichR_NonASD_ASD/Sex_Stratified/05_Females/Extra/bsseq_background.bed', sep = '\t')
colnames(regions) = c('seqnames', 'start', 'end')

sigRegions = read.table('/quobyte/lasallegrp/Logan/MARBLES_cfDNAWGBS_Analysis/DMRichR/10_DMRichR_NonASD_ASD/Sex_Stratified/05_Females/DMRs/DMRs.bed', sep = '\t')
colnames(sigRegions) = c('seqnames', 'start', 'end')
sigRegions




library(GenomicRanges)

# Assuming regions is your data.frame with columns 'seqnames', 'start', 'end', etc.
regions <- makeGRangesFromDataFrame(regions)
regions

# Assuming regions is your data.frame with columns 'seqnames', 'start', 'end', etc.
sigRegions <- makeGRangesFromDataFrame(sigRegions)
sigRegions

# changed code for chromHMM
#' chromHMM
#' @title Chromatin state enrichments
#' @description Perfom enrichment testing against the ChromHMM 15-state model for hg38
#'  using \code{LOLA}
#' @param sigRegions A \code{GRanges} object of significant regions
#' @param regions A \code{GRanges} object of background regions
#' @param cores An integer of how many cores to use
#' @return A \code{tibble} of enrichment results
#' @importFrom dplyr as_tibble select mutate summarize pull mutate_if arrange recode_factor
#' @importFrom tidyr pivot_wider
#' @importFrom LOLA loadRegionDB runLOLA writeCombinedEnrichment
#' @importFrom magrittr %>% %T>%
#' @importFrom hablar s
#' @export chromHMM
#' 
chromHMM <- function(sigRegions = sigRegions,
                     regions = regions,
                     cores = cores){
  message("Performing ChromHMM enrichment testing")
  chromHMM <- LOLA::runLOLA(userSets = sigRegions,
                  userUniverse = regions,
                  regionDB = db,
                  minOverlap = 1,
                  cores = cores,
                  redefineUserSets = FALSE) %T>%
    LOLA::writeCombinedEnrichment(combinedResults = .,
                                  outFolder = "ChromHMM",
                                  includeSplits = FALSE) %>%
    dplyr::as_tibble() %>%
    dplyr::select(oddsRatio, cellType, tissue, antibody) %>%
    dplyr::mutate(antibody = as.factor(antibody)) %>% 
    dplyr::mutate(antibody = dplyr::recode_factor(antibody,
                                                  "01_TssA" = "Active TSS",
                                                  "02_TssAFlnk" = "Flanking Active TSS",
                                                  "03_TxFlnk" = "Transcription at Gene 5' and 3'",
                                                  "04_Tx" = "Strong Transcription",
                                                  "05_TxWk" = "Weak Transcription",
                                                  "06_EnhG"= "Genic Enhancers",
                                                  "07_Enh" = "Enhancers",
                                                  "08_ZnfRpts" = "ZNF Genes & Repeats",
                                                  "09_Het" = "Heterochromatin",
                                                  "10_TssBiv" = "Bivalent/Poised TSS",
                                                  "11_BivFlnk" = "Flanking Bivalent TSS/Enhancer",
                                                  "12_EnhBiv" = "Bivalent Enhancer",
                                                  "13_ReprPC" = "Repressed PolyComb",
                                                  "14_ReprPCwk" = "Weak Repressed PolyComb",
                                                  "15_Quies" = "Quiescent/Low"
                                                  )
                  ) %>%
    dplyr::arrange(antibody) 
  
  # Fix Inf Odds Ratio
  max <- chromHMM %>%
  dplyr::summarize(max(hablar::s(oddsRatio))) %>% 
    dplyr::pull()
  
  chromHMM <- chromHMM %>%
    dplyr::mutate_if(is.numeric, function(x) ifelse(is.infinite(x), max, x)) %>% 
    tidyr::pivot_wider(names_from = antibody, values_from = oddsRatio) %>%
    dplyr::arrange(tissue) %>%
    return()
}

#' chromHMM_heatmap
#' @title Chromatin state heatmap
#' @description Plot a heatmap of \code{LOLA} enrichment testing results of the ChromHMM
#'  15-state model for hg38inificantregions_mCG_c1.bed
#' @param chromHMM A \code{tibble} of enrichment results
#' @return Saves a heatmap
#' @importFrom dplyr group_by tally select
#' @importFrom magrittr %>%
#' @importFrom viridis viridis
#' @importFrom gplots heatmap.2
#' @importFrom PerformanceAnalytics tol21rainbow
#' @export chromHMM_heatmap
#' 
chromHMM_heatmap <- function(chromHMM = chromHMM){
  message("Plotting ChromHMM heatmap")
  
  # Make Row Labels
  labels <- chromHMM %>%
    dplyr::group_by(tissue) %>% 
    dplyr::tally()
  
  # Colors
  palette(PerformanceAnalytics::tol21rainbow)
  rowcolors <- as.list(palette(PerformanceAnalytics::tol21rainbow))
  rowcolors <- rowcolors[1:nrow(labels)]
  
  colorlist <- list()
  for (i in 1:length(labels$n)){
    colorlist[[i]] <- rep(rowcolors[i], labels$n[i])
  }
  colorlist <- unlist(colorlist)
  
  # Select matrix data
  data <- chromHMM %>%
    dplyr::select(-cellType, -tissue) %>%
    data.matrix()
  
  # Plot Heatmap
  pdf("ChromHMM/ChromHMM_heatmap.pdf",
      height = 8.5,
      width = 12)
  
  gplots::heatmap.2(data,
                    Rowv = F,
                    Colv = F,
                    dendrogram = "none",
                    col = viridis::viridis(15, option = "inferno"),
                    margins = c(15,2),
                    trace = "none",
                    labRow = "" ,
                    labCol = colnames(data),
                    main = "Enriched Chromatin States for Differentially Methylated Regions",
                    RowSideColors = colorlist,
                    srtCol = 60,
                    keysize = 0.85,
                    key.par = list(cex = 0.5),
                    key.xlab = "Odds Ratio",
                    key.ylab = "Frequency",
                    key.title = ""
  )
  
  # Legend
  par(xpd = TRUE, mar = par()$mar + c(0,6,0,0))
  legend(x = -0.075,
         y= 0.9,
         legend = labels$tissue,
         col = unlist(rowcolors),
         lty = 1,
         lwd = 6,
         cex = 1,
         bty = "n")
  dev.off()
}

# ' dmrList
# ' @title Stratify DMRs by directionality 
# ' @description Create \code{GRangesList} object of all, hypermethylated,
# '  and hypomethylated DMRs from \code{dmrseq::dmrseq()}
# ' @param sigRegions A \code{GRanges} object of DMRs from \code{dmrseq::dmrseq()}
# ' @return A \code{GRangesList} of DMRs
# ' @importFrom magrittr %>%
# ' @importFrom plyranges filter
# ' @importFrom GenomicRanges GRangesList
# ' @export dmrList
# ' 
# dmrList <- function(sigRegions = sigRegions){
#   message("Making DMR list")
  
#   GenomicRanges::GRangesList("All DMRs" = sigRegions,
#                              "Hypermethylated DMRs" = sigRegions %>%
#                                plyranges::filter(stat > 0),
#                              "Hypomethylated DMRs" = sigRegions %>%
#                                plyranges::filter(stat < 0)) %>% 
#     return()
# }

chromHMM <- chromHMM(sigRegions = sigRegions, regions = regions, cores = 10)
chromHMM_heatmap <- chromHMM_heatmap(chromHMM = chromHMM)
